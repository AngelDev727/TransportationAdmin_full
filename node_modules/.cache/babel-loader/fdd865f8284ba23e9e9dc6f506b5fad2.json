{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataProvider, useQuery, Loading, Error } from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'; // const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst DashChart = () => {\n  _s();\n\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n  // const width = \n  const dataProvider = useDataProvider();\n  const [data, setData] = useState();\n  const [total, setTotal] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    // dataProvider.getList()\n    // dataProvider('GET_LIST', 'notifications')\n    dataProvider('GET_LIST', 'notifications', {\n      pagination: {\n        page: 1,\n        perPage: 100000\n      },\n      sort: {\n        report_timestamp: 'ASC'\n      },\n      filter: {}\n    }) // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n    .then(({\n      data,\n      total\n    }) => {\n      setData(data);\n      setTotal(total);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  var chartData = [];\n  console.log(\"total\", total); // console.log(data);\n  // console.log(error);\n\n  data.map(async answer => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    console.log(answer.score); // const scores = answer.score.split(\",\");\n    // const day = new Date(answer.date).getDate() + 1;\n    // if(scores.length > 1) {\n    // var total = 0;\n    // scores.forEach(item => {\n    //     total += Number(item);\n    // });\n    // answer.score = (total / scores.length).toFixed(0) + \"\";\n    // }\n    // if(answers[answer.question_id] === undefined) {\n    // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n    // if (answers[answer.question_id].answer[day] !== undefined) {\n    //     answers[answer.question_id].answer[day].score = answer.score;\n    // }\n    // } else {\n    // if (answers[answer.question_id].answer[day] !== undefined) {\n    //     answers[answer.question_id].answer[day].score = answer.score;\n    // }\n    // }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AreaChart, {\n    width: 500,\n    height: 400,\n    data: chartData,\n    margin: {\n      top: 10,\n      right: 30,\n      left: 0,\n      bottom: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"amt\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashChart, \"q0G1Bc4sulC7kIZag34mnG7HcHQ=\", false, function () {\n  return [useDataProvider];\n});\n\n_c = DashChart;\nexport default DashChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashChart\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js"],"names":["React","useState","useEffect","useDataProvider","useQuery","Loading","Error","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","DashChart","dataProvider","data","setData","total","setTotal","loading","setLoading","error","setError","pagination","page","perPage","sort","report_timestamp","filter","then","catch","chartData","console","log","map","answer","length","score","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDataProvider, useQuery, Loading, Error } from 'react-admin';\nimport {\n    ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts';\n\n// const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst DashChart = () => {\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n    // const width = \n\n    const dataProvider = useDataProvider();\n    const [data, setData] = useState();\n    const [total, setTotal] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n\n    useEffect(() => {\n        // dataProvider.getList()\n        // dataProvider('GET_LIST', 'notifications')\n\n        dataProvider('GET_LIST', 'notifications', { pagination: { page: 1 , perPage: 100000 }, sort: {report_timestamp:'ASC'}, filter: {} })\n        // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n            .then(({ data, total }) => {\n                setData(data); \n                setTotal(total);                \n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n\n    var chartData = [];\n    console.log(\"total\", total);\n    // console.log(data);\n    // console.log(error);\n    data.map(async answer => {\n        if (!data || data.length === 0) {\n        return;\n        }\n\n        console.log(answer.score);\n        // const scores = answer.score.split(\",\");\n        // const day = new Date(answer.date).getDate() + 1;\n        // if(scores.length > 1) {\n        // var total = 0;\n        // scores.forEach(item => {\n        //     total += Number(item);\n        // });\n        // answer.score = (total / scores.length).toFixed(0) + \"\";\n        // }\n        // if(answers[answer.question_id] === undefined) {\n        // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n        // if (answers[answer.question_id].answer[day] !== undefined) {\n        //     answers[answer.question_id].answer[day].score = answer.score;\n        // }\n        // } else {\n        // if (answers[answer.question_id].answer[day] !== undefined) {\n        //     answers[answer.question_id].answer[day].score = answer.score;\n        // }\n        // }\n    });\n\n\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n\n    return (\n        <AreaChart width={500} height={400} data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0,}}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"amt\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n        </AreaChart>\n    );\n}\n\nexport default DashChart;"]},"metadata":{},"sourceType":"module"}