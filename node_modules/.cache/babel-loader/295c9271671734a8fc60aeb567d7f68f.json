{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rapunzel/Documents/tb-admin 2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rapunzel/Documents/tb-admin 2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';import Methods from'./methods';import{GET_LIST,GET_ONE,GET_MANY,GET_MANY_REFERENCE,CREATE,UPDATE,DELETE,DELETE_MANY}from'react-admin';/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */var BaseConfiguration={initialQuerytimeout:10000,timestampFieldNames:{createdAt:'createdAt',updatedAt:'updatedAt'}};var RestProvider=function RestProvider(){var firebaseConfig=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};options=Object.assign({},BaseConfiguration,options);var _options=options,timestampFieldNames=_options.timestampFieldNames,trackedResources=_options.trackedResources;var resourcesStatus={};// const resourcesReferences = {};\nvar resourcesData={};var resourcesPaths={};var resourcesUploadFields={};if(firebase.apps.length===0){firebase.initializeApp(firebaseConfig);firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);}/* Functions */var upload=options.upload||Methods.upload;var save=options.save||Methods.save;var del=options.del||Methods.del;var getItemID=options.getItemID||Methods.getItemID;var getOne=options.getOne||Methods.getOne;var getMany=options.getMany||Methods.getMany;var getManyReference=options.getManyReference||Methods.getManyReference;var delMany=options.delMany||Methods.delMany;var getList=options.getList||Methods.getList;var firebaseSaveFilter=options.firebaseSaveFilter?options.firebaseSaveFilter:function(data){return data;};// const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n// Sanitize Resources\ntrackedResources.map(function(resource,index){if(typeof resource===Array){resource={name:resource['name'],path:resource['path']||resource['name'],uploadFields:resource['uploadFields']||[]};trackedResources[index]=resource;}var _resource=resource,name=_resource.name,path=_resource.path,uploadFields=_resource.uploadFields;if(!resource.name){throw new Error(\"name is missing from resource \".concat(resource));}resourcesUploadFields[name]=uploadFields||[];resourcesPaths[name]=path||name;resourcesData[name]={};});/**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resourceName Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a REST response\n     */return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(type,resourceName,params){var result,uploadFields,itemId,uploads,currentData,uploadResults;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return resourcesStatus[resourceName];case 2:result=null;_context.t0=type;_context.next=_context.t0===GET_LIST?6:_context.t0===GET_MANY?10:_context.t0===GET_MANY_REFERENCE?14:_context.t0===GET_ONE?18:_context.t0===DELETE?22:_context.t0===DELETE_MANY?27:_context.t0===UPDATE?31:_context.t0===CREATE?31:41;break;case 6:_context.next=8;return getList(params,resourcesPaths[resourceName],resourcesData[resourceName]);case 8:result=_context.sent;return _context.abrupt(\"return\",result);case 10:_context.next=12;return getMany(params,resourcesPaths[resourceName],resourcesData[resourceName]);case 12:result=_context.sent;return _context.abrupt(\"return\",result);case 14:_context.next=16;return getManyReference(params,resourcesPaths[resourceName],resourcesData[resourceName]);case 16:result=_context.sent;return _context.abrupt(\"return\",result);case 18:_context.next=20;return getOne(params,resourcesPaths[resourceName],resourcesData[resourceName]);case 20:result=_context.sent;return _context.abrupt(\"return\",result);case 22:// console.log('DELETE');\nuploadFields=resourcesUploadFields[resourceName]?resourcesUploadFields[resourceName]:[];_context.next=25;return del(params.id,resourceName,resourcesPaths[resourceName],uploadFields);case 25:result=_context.sent;return _context.abrupt(\"return\",result);case 27:_context.next=29;return delMany(params.ids,resourcesPaths[resourceName],resourcesData[resourceName]);case 29:result=_context.sent;return _context.abrupt(\"return\",result);case 31:// console.log('UPDATE/CREATE');\nitemId=getItemID(params,type,resourceName,resourcesPaths[resourceName],resourcesData[resourceName]);uploads=resourcesUploadFields[resourceName]?resourcesUploadFields[resourceName].map(function(field){return upload(field,params.data,itemId,resourceName,resourcesPaths[resourceName]);}):[];currentData=resourcesData[resourceName][itemId]||{};_context.next=36;return Promise.all(uploads);case 36:uploadResults=_context.sent;_context.next=39;return save(itemId,params.data,currentData,resourceName,resourcesPaths[resourceName],firebaseSaveFilter,uploadResults,type===CREATE,timestampFieldNames);case 39:result=_context.sent;return _context.abrupt(\"return\",result);case 41:console.error('Undocumented method: ',type);return _context.abrupt(\"return\",{data:[]});case 43:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2,_x3){return _ref.apply(this,arguments);};}();};export default RestProvider;","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin 2/src/lib/RestProvider.js"],"names":["firebase","Methods","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","DELETE","DELETE_MANY","BaseConfiguration","initialQuerytimeout","timestampFieldNames","createdAt","updatedAt","RestProvider","firebaseConfig","options","Object","assign","trackedResources","resourcesStatus","resourcesData","resourcesPaths","resourcesUploadFields","apps","length","initializeApp","auth","setPersistence","Auth","Persistence","SESSION","upload","save","del","getItemID","getOne","getMany","getManyReference","delMany","getList","firebaseSaveFilter","data","map","resource","index","Array","name","path","uploadFields","Error","type","resourceName","params","result","id","ids","itemId","uploads","field","currentData","Promise","all","uploadResults","console","error"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Methods from './methods';\n\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE, DELETE_MANY } from 'react-admin';\n\n/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */\n\nconst BaseConfiguration = {\ninitialQuerytimeout: 10000,\ntimestampFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n}\n};\n\nconst RestProvider = (firebaseConfig = {}, options = {}) => {\n    options = Object.assign({}, BaseConfiguration, options);\n    const { timestampFieldNames, trackedResources } = options;\n\n    const resourcesStatus = {};\n    // const resourcesReferences = {};\n    const resourcesData = {};\n    const resourcesPaths = {};\n    const resourcesUploadFields = {};\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n    }\n\n    /* Functions */\n    const upload = options.upload || Methods.upload;\n    const save = options.save || Methods.save;\n    const del = options.del || Methods.del;\n    const getItemID = options.getItemID || Methods.getItemID;\n    const getOne = options.getOne || Methods.getOne;\n    const getMany = options.getMany || Methods.getMany;\n    const getManyReference = options.getManyReference || Methods.getManyReference;\n    const delMany = options.delMany || Methods.delMany;\n    const getList = options.getList || Methods.getList;\n\n    const firebaseSaveFilter = options.firebaseSaveFilter ? options.firebaseSaveFilter : data => data;\n    // const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n\n    // Sanitize Resources\n    trackedResources.map((resource, index) => {\n        if (typeof resource === Array) {\n        resource = {\n            name: resource['name'],\n            path: resource['path'] || resource['name'],\n            uploadFields: resource['uploadFields'] || []\n        };\n        trackedResources[index] = resource;\n        }\n\n        const { name, path, uploadFields } = resource;\n        if (!resource.name) {\n        throw new Error(`name is missing from resource ${resource}`);\n        }\n        resourcesUploadFields[name] = uploadFields || [];\n        resourcesPaths[name] = path || name;\n        resourcesData[name] = {};\n    });\n\n    /**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resourceName Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a REST response\n     */\n\n    return async (type, resourceName, params) => {\n        await resourcesStatus[resourceName];\n        let result = null;\n        switch (type) {\n        case GET_LIST:\n            // console.log(params);\n            result = await getList(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n        case GET_MANY:\n            result = await getMany(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            // console.log('GET_MANY');\n            return result;\n\n        case GET_MANY_REFERENCE:\n            // console.log('GET_MANY_REFERENCE');\n            result = await getManyReference(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n\n        case GET_ONE:\n            // console.log('GET_ONE');\n            result = await getOne(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n\n        case DELETE:\n            // console.log('DELETE');\n            const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : [];\n            result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields);\n            return result;\n\n        case DELETE_MANY:\n            // console.log('DELETE_MANY');\n            result = await delMany(params.ids, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n        case UPDATE:\n        case CREATE:\n            // console.log('UPDATE/CREATE');\n            let itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName]);\n            const uploads = resourcesUploadFields[resourceName]\n            ? resourcesUploadFields[resourceName].map(field =>\n                upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName])\n                )\n            : [];\n            \n            const currentData = resourcesData[resourceName][itemId] || {};\n            const uploadResults = await Promise.all(uploads);\n            \n            result = await save(\n            itemId,\n            params.data,\n            currentData,\n            resourceName,\n            resourcesPaths[resourceName],\n            firebaseSaveFilter,\n            uploadResults,\n            type === CREATE,\n            timestampFieldNames\n            );\n            return result;\n\n        default:\n            console.error('Undocumented method: ', type);\n            return { data: [] };\n        }\n    };\n};\n\nexport default RestProvider;"]},"metadata":{},"sourceType":"module"}