{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/MyDATA/Mega_data/Project/2020/2020-11/08-TransportationAdmin/tb-admin_full/src/components/DashChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error } from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport PropTypes from 'prop-types';\n\nfunction getTimestampFirstDayOfKey(datetype) {\n  var date = new Date();\n  date.setDate(1);\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n\n  if (datetype === \"month\") {\n    return Math.round(Number(date.valueOf() / 1000));\n  } else {\n    date.setMonth(0);\n    return Math.round(Number(date.valueOf() / 1000));\n  }\n}\n\nconst getDateTime = (value, datetype) => {\n  if (value === undefined) {\n    return \"\";\n  } else {\n    const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n    var year = timestamp.getFullYear();\n    var month = (1 + timestamp.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month; // return timestamp.toLocaleString();\n\n    if (datetype === \"month\") return timestamp.toLocaleDateString();else return month + \"/\" + year;\n  }\n};\n\nconst DashChart = ({\n  datetype,\n  selected,\n  totalNumber\n}) => {\n  _s();\n\n  const dataProvider = useDataProvider();\n  const [total, setTotal] = useState(0);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    dataProvider('GET_LIST', 'notifications', {\n      sort: {\n        field: 'report_timestamp',\n        order: 'ASC'\n      },\n      pagination: {\n        page: 1,\n        perPage: 10000000\n      }\n    }).then(({\n      data,\n      total\n    }) => {\n      totalNumber = total;\n      setTotal(total);\n      setData(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  var chartData = [];\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 23\n  }, this);\n  var preDate = \"\";\n  data.map(async answer => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    if (answer.report_timestamp < getTimestampFirstDayOfKey(datetype)) {\n      return;\n    }\n\n    const selDate = getDateTime(answer.report_timestamp, datetype);\n\n    if (preDate === selDate) {\n      chartData[chartData.length - 1].Notifications += 1;\n    } else {\n      chartData[chartData.length] = {\n        name: selDate,\n        Notifications: 1\n      };\n      preDate = selDate;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    height: 300,\n    width: \"99%\",\n    children: /*#__PURE__*/_jsxDEV(AreaChart // width={500} height={400} \n    , {\n      data: chartData,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 30,\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"Notifications\",\n        stroke: \"#8884d8\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashChart, \"wMMiwX3JyDrKJTty59sXlBYlUmY=\", false, function () {\n  return [useDataProvider];\n});\n\n_c = DashChart;\nDashChart.propTypes = {\n  datetype: PropTypes.string.isRequired,\n  selectedValue: PropTypes.string\n};\nexport default DashChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashChart\");","map":{"version":3,"sources":["/Volumes/MyDATA/Mega_data/Project/2020/2020-11/08-TransportationAdmin/tb-admin_full/src/components/DashChart.js"],"names":["React","useState","useEffect","useDataProvider","Loading","Error","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","PropTypes","getTimestampFirstDayOfKey","datetype","date","Date","setDate","setHours","setMinutes","setSeconds","Math","round","Number","valueOf","setMonth","getDateTime","value","undefined","timestamp","year","getFullYear","month","getMonth","toString","length","toLocaleDateString","DashChart","selected","totalNumber","dataProvider","total","setTotal","data","setData","loading","setLoading","error","setError","sort","field","order","pagination","page","perPage","then","catch","chartData","preDate","map","answer","report_timestamp","selDate","Notifications","name","top","right","left","bottom","propTypes","string","isRequired","selectedValue"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error} from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts';\nimport PropTypes from 'prop-types';\n\nfunction getTimestampFirstDayOfKey(datetype) {\n    var date = new Date();\n    date.setDate(1);\n    date.setHours(0);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    \n    if (datetype === \"month\") {\n        return Math.round(Number(date.valueOf() / 1000));\n    } else {\n        date.setMonth(0);\n        return Math.round(Number(date.valueOf() / 1000));\n    }\n}\n\nconst getDateTime = (value, datetype) => {\n    if (value === undefined) {\n        return \"\";\n    } else {\n        const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n        var year = timestamp.getFullYear();\n        var month = (1 + timestamp.getMonth()).toString();\n        month = month.length > 1 ? month : '0' + month;\n        \n        // return timestamp.toLocaleString();\n        if (datetype === \"month\")\n            return timestamp.toLocaleDateString();\n        else \n            return month + \"/\" + year;\n    }\n};\n\nconst DashChart = ({ datetype, selected, totalNumber }) => {\n\n    const dataProvider = useDataProvider();\n    const [total, setTotal] = useState(0);\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n\n    useEffect(() => {\n        dataProvider('GET_LIST', 'notifications', {\n            sort: { field: 'report_timestamp', order: 'ASC' },\n            pagination: { page: 1, perPage: 10000000 },\n        })\n            .then(({ data, total }) => {\n                totalNumber = total\n                setTotal(total)\n                setData(data);              \n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n\n    var chartData = [];\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n\n    var preDate = \"\"\n    data.map(async answer => {\n        if (!data || data.length === 0) {\n            return;\n        }\n\n        if (answer.report_timestamp < getTimestampFirstDayOfKey(datetype)) {\n            return;\n        }\n\n        const selDate = getDateTime(answer.report_timestamp, datetype);\n\n        if (preDate === selDate) {\n            chartData[chartData.length - 1].Notifications += 1;\n        } else {\n            chartData[chartData.length] = {\n                name: selDate,\n                Notifications  : 1\n            };\n            preDate = selDate;\n        }\n    });\n\n    return (\n        <ResponsiveContainer height={300} width='99%'>\n            <AreaChart \n            // width={500} height={400} \n            data={chartData} margin={{ top: 10, right: 30, left: 30, bottom: 0}}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"Notifications\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n            </AreaChart>\n        </ResponsiveContainer>  \n        \n    );\n}\n\nDashChart.propTypes = {\n    datetype: PropTypes.string.isRequired,\n    selectedValue: PropTypes.string,\n};\n\nexport default DashChart;"]},"metadata":{},"sourceType":"module"}