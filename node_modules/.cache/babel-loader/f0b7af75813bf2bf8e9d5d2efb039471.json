{"ast":null,"code":"/* globals localStorage */\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_CHECK, AUTH_GET_PERMISSIONS } from 'react-admin';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst baseConfig = {\n  userProfilePath: '/admin/',\n  userAdminProp: 'isAdmin',\n  localStorageTokenName: 'RAFirebaseClientToken',\n  handleAuthStateChange: async (auth, config) => {\n    if (auth) {\n      const snapshot = await firebase.firestore().doc(config.userProfilePath + auth.user.uid).get();\n      const profile = snapshot.data();\n\n      if (profile && profile[config.userAdminProp]) {\n        const firebaseToken = await auth.user.getIdToken();\n        let user = {\n          auth,\n          profile,\n          firebaseToken\n        };\n        localStorage.setItem(config.localStorageTokenName, firebaseToken);\n        return user;\n      } else {\n        firebase.auth().signOut();\n        localStorage.removeItem(config.localStorageTokenName);\n        throw new Error('sign_in_error');\n      }\n    } else {\n      localStorage.removeItem(config.localStorageTokenName);\n      throw new Error('sign_in_error');\n    }\n  }\n};\nexport default ((config = {}) => {\n  config = { ...baseConfig,\n    ...config\n  };\n\n  const firebaseLoaded = () => new Promise(resolve => {\n    firebase.auth().onAuthStateChanged(resolve);\n  });\n\n  return async (type, params) => {\n    if (type === AUTH_LOGOUT) {\n      config.handleAuthStateChange(null, config).catch(() => {});\n      return firebase.auth().signOut();\n    }\n\n    if (firebase.auth().currentUser) {\n      await firebase.auth().currentUser.reload();\n    }\n\n    if (type === AUTH_CHECK) {\n      await firebaseLoaded();\n\n      if (!firebase.auth().currentUser) {\n        throw new Error('sign_in_error');\n      }\n\n      return true;\n    }\n\n    if (type === AUTH_GET_PERMISSIONS) {\n      console.log('AUTH_GET_PERMISSIONS');\n      await firebaseLoaded();\n\n      if (!firebase.auth().currentUser) {\n        throw new Error('sign_in_error');\n      }\n\n      const token = await firebase.auth().currentUser.getIdTokenResult();\n      return token.claims;\n    }\n\n    if (type === AUTH_LOGIN) {\n      const {\n        username,\n        password,\n        alreadySignedIn\n      } = params;\n      let auth = firebase.auth().currentUser;\n\n      if (!auth || !alreadySignedIn) {\n        auth = await firebase.auth().signInWithEmailAndPassword(username, password);\n      }\n\n      return config.handleAuthStateChange(auth, config);\n    }\n\n    return false;\n  };\n});","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin/src/lib/AuthProvider.js"],"names":["AUTH_LOGIN","AUTH_LOGOUT","AUTH_CHECK","AUTH_GET_PERMISSIONS","firebase","baseConfig","userProfilePath","userAdminProp","localStorageTokenName","handleAuthStateChange","auth","config","snapshot","firestore","doc","user","uid","get","profile","data","firebaseToken","getIdToken","localStorage","setItem","signOut","removeItem","Error","firebaseLoaded","Promise","resolve","onAuthStateChanged","type","params","catch","currentUser","reload","console","log","token","getIdTokenResult","claims","username","password","alreadySignedIn","signInWithEmailAndPassword"],"mappings":"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","sourcesContent":["/* globals localStorage */\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_CHECK, AUTH_GET_PERMISSIONS } from 'react-admin';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst baseConfig = {\n    userProfilePath: '/admin/',\n    userAdminProp: 'isAdmin',\n    localStorageTokenName: 'RAFirebaseClientToken',\n    handleAuthStateChange: async (auth, config) => {\n        if (auth) {\n            const snapshot = await firebase\n            .firestore()\n            .doc(config.userProfilePath + auth.user.uid)\n            .get();\n            const profile = snapshot.data();\n\n            if (profile && profile[config.userAdminProp]) {\n                const firebaseToken = await auth.user.getIdToken();\n                let user = { auth, profile, firebaseToken };\n                localStorage.setItem(config.localStorageTokenName, firebaseToken);\n                return user;\n            } else {\n                firebase.auth().signOut();\n                localStorage.removeItem(config.localStorageTokenName);\n                throw new Error('sign_in_error');\n        }\n        } else {\n            localStorage.removeItem(config.localStorageTokenName);\n            throw new Error('sign_in_error');\n        }\n    }\n};\n\nexport default (config = {}) => {\n    config = { ...baseConfig, ...config };\n\n    const firebaseLoaded = () =>\n        new Promise(resolve => {\n            firebase.auth().onAuthStateChanged(resolve);\n        });\n\n    return async (type, params) => {\n        if (type === AUTH_LOGOUT) {\n            config.handleAuthStateChange(null, config).catch(() => {});\n            return firebase.auth().signOut();\n        }\n\n        if (firebase.auth().currentUser) {\n            await firebase.auth().currentUser.reload();\n        }\n\n        if (type === AUTH_CHECK) {\n            await firebaseLoaded();\n\n            if (!firebase.auth().currentUser) {\n                throw new Error('sign_in_error');\n            }\n            return true;\n        }\n\n        if (type === AUTH_GET_PERMISSIONS) {\n            console.log('AUTH_GET_PERMISSIONS');\n            await firebaseLoaded();\n\n            if (!firebase.auth().currentUser) {\n                throw new Error('sign_in_error');\n            }\n\n            const token = await firebase.auth().currentUser.getIdTokenResult();\n            return token.claims;\n        }\n\n        if (type === AUTH_LOGIN) {\n            const { username, password, alreadySignedIn } = params;\n            let auth = firebase.auth().currentUser;\n\n            if (!auth || !alreadySignedIn) {\n                auth = await firebase.auth().signInWithEmailAndPassword(username, password);\n            }\n            return config.handleAuthStateChange(auth, config);\n        }\n\n        return false;\n    };\n};"]},"metadata":{},"sourceType":"module"}