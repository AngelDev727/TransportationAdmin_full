{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, Loading } from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'; // const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst getDateTime = value => {\n  if (value === undefined) {\n    return \"\";\n  } else {\n    const timestamp = new Date(value === undefined ? new Date() : value * 1000); // return timestamp.toLocaleString();\n\n    return timestamp.toLocaleDateString();\n  }\n};\n\nconst DashChart = () => {\n  _s();\n\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n  // const width = \n  const {\n    data,\n    loading,\n    error\n  } = useQuery({\n    type: 'getList',\n    resource: 'notifications',\n    payload: {\n      path: \"reports_test\",\n      pagination: {\n        page: 1,\n        perPage: 10000000\n      },\n      sort: {\n        field: \"report_timestamp\",\n        order: \"ASC\"\n      },\n      filter: {}\n    }\n  }); // useEffect(() => {\n  //     // dataProvider.getList()\n  //     // dataProvider('GET_LIST', 'notifications')\n  //     // dataProvider(\"GET_LIST\", 'notifications', {\n  //     //     // filter: { date_gte: aMonthAgo.toISOString() },\n  //     //     sort: { field: 'report_timestamp', order: 'DESC' },\n  //     //     pagination: { page: 1, perPage: 50 },\n  //     // })\n  //     //     .then(response => {\n  //     //         this.setState({ commands: response.data });\n  //     //     });\n  //     dataProvider('GET_LIST', 'reports_test', {\n  //         // filter: { date_gte: aMonthAgo.toISOString() },\n  //         // sort: { field: 'report_timestamp', order: 'DESC' },\n  //         // pagination: { page: 1, perPage: 100000 },\n  //     })\n  //     // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n  //         .then(({ data, total }) => {\n  //             setData(data); \n  //             setTotal(total);                \n  //             setLoading(false);\n  //         })\n  //         .catch(error => {\n  //             setError(error);\n  //             setLoading(false);\n  //         })\n  // }, []);\n\n  var chartData = []; // console.log(\"total\", total);\n\n  console.log(\"data.length: \" + data.length);\n  console.log(\"error :\" + error);\n  data.map(async answer => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    chartData[chartData.length] = {\n      name: getDateTime(answer.report_timestamp),\n      uv: answer.report_timestamp\n    }; // const scores = answer.score.split(\",\");\n    // const day = new Date(answer.date).getDate() + 1;\n    // if(scores.length > 1) {\n    // var total = 0;\n    // scores.forEach(item => {\n    //     total += Number(item);\n    // });\n    // answer.score = (total / scores.length).toFixed(0) + \"\";\n    // }\n    // if(answers[answer.question_id] === undefined) {\n    // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n    // if (answers[answer.question_id].answer[day] !== undefined) {\n    //     answers[answer.question_id].answer[day].score = answer.score;\n    // }\n    // } else {\n    // if (answers[answer.question_id].answer[day] !== undefined) {\n    //     answers[answer.question_id].answer[day].score = answer.score;\n    // }\n    // }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AreaChart, {\n    width: 500,\n    height: 400,\n    data: chartData,\n    margin: {\n      top: 10,\n      right: 30,\n      left: 0,\n      bottom: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n      strokeDasharray: \"3 3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Area, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#8884d8\",\n      fill: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashChart, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = DashChart;\nexport default DashChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashChart\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js"],"names":["React","useState","useEffect","useQuery","Loading","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","getDateTime","value","undefined","timestamp","Date","toLocaleDateString","DashChart","data","loading","error","type","resource","payload","path","pagination","page","perPage","sort","field","order","filter","chartData","console","log","length","map","answer","name","report_timestamp","uv","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useQuery, Loading } from 'react-admin';\nimport {\n    ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts';\n\n// const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst getDateTime = value => {\n    if (value === undefined) {\n        return \"\";\n    } else {\n        const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n        // return timestamp.toLocaleString();\n        return timestamp.toLocaleDateString();\n    }\n    \n};\n\nconst DashChart = () => {\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n    // const width = \n\n    const { data, loading, error } = useQuery({\n        type: 'getList',\n        resource: 'notifications',\n        payload: {\n          path: \"reports_test\",\n          pagination: { page: 1, perPage: 10000000 },\n          sort: { field: \"report_timestamp\", order: \"ASC\" },\n          filter: { }\n        }\n    })\n    \n    // useEffect(() => {\n    //     // dataProvider.getList()\n    //     // dataProvider('GET_LIST', 'notifications')\n\n    //     // dataProvider(\"GET_LIST\", 'notifications', {\n    //     //     // filter: { date_gte: aMonthAgo.toISOString() },\n    //     //     sort: { field: 'report_timestamp', order: 'DESC' },\n    //     //     pagination: { page: 1, perPage: 50 },\n    //     // })\n    //     //     .then(response => {\n    //     //         this.setState({ commands: response.data });\n    //     //     });\n\n    //     dataProvider('GET_LIST', 'reports_test', {\n    //         // filter: { date_gte: aMonthAgo.toISOString() },\n    //         // sort: { field: 'report_timestamp', order: 'DESC' },\n    //         // pagination: { page: 1, perPage: 100000 },\n    //     })\n    //     // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n    //         .then(({ data, total }) => {\n    //             setData(data); \n    //             setTotal(total);                \n    //             setLoading(false);\n    //         })\n    //         .catch(error => {\n    //             setError(error);\n    //             setLoading(false);\n    //         })\n    // }, []);\n\n    var chartData = [];\n    // console.log(\"total\", total);\n    console.log(\"data.length: \" + data.length);\n    console.log(\"error :\" + error);\n    \n    data.map(async answer => {\n        if (!data || data.length === 0) {\n            return;\n        }\n\n        chartData[chartData.length] = {\n            name: getDateTime(answer.report_timestamp),\n            uv  : answer.report_timestamp\n        };\n\n        // const scores = answer.score.split(\",\");\n        // const day = new Date(answer.date).getDate() + 1;\n        // if(scores.length > 1) {\n        // var total = 0;\n        // scores.forEach(item => {\n        //     total += Number(item);\n        // });\n        // answer.score = (total / scores.length).toFixed(0) + \"\";\n        // }\n        // if(answers[answer.question_id] === undefined) {\n        // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n        // if (answers[answer.question_id].answer[day] !== undefined) {\n        //     answers[answer.question_id].answer[day].score = answer.score;\n        // }\n        // } else {\n        // if (answers[answer.question_id].answer[day] !== undefined) {\n        //     answers[answer.question_id].answer[day].score = answer.score;\n        // }\n        // }\n    });\n\n\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n\n    return (\n        <AreaChart width={500} height={400} data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0,}}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n        </AreaChart>\n    );\n}\n\nexport default DashChart;"]},"metadata":{},"sourceType":"module"}