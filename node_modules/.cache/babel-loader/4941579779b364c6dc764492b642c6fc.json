{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rapunzel/Documents/tb-admin/src/models/NotificationList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react'; // import * as React from 'react';\n\nimport { cloneElement, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useListContext, CreateButton, ExportButton, Button, sanitizeListRestProps } from 'react-admin';\nimport IconEvent from '@material-ui/icons/Event';\nimport { List, Datagrid, TextField, Filter, TextInput, ReferenceInput, SelectInput, Show, SimpleShowLayout, SimpleList, DeleteButton, TopToolbar } from 'react-admin';\nimport { useMediaQuery } from '@material-ui/core';\nimport { DateTimeField } from '../components';\nexport const NotificationFilter = props => /*#__PURE__*/_jsxDEV(Filter, { ...props,\n  children: /*#__PURE__*/_jsxDEV(TextInput, {\n    label: \"Search\",\n    source: \"report_title\",\n    alwaysOn: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 5\n}, this);\n_c = NotificationFilter;\n\nconst ListActions = props => {\n  _s();\n\n  const {\n    className,\n    exporter,\n    filters,\n    maxResults,\n    ...rest\n  } = props;\n  const {\n    currentSort,\n    resource,\n    displayedFilters,\n    filterValues,\n    hasCreate,\n    basePath,\n    selectedIds,\n    showFilter,\n    total\n  } = useListContext();\n  return /*#__PURE__*/_jsxDEV(TopToolbar, {\n    className: className,\n    ...sanitizeListRestProps(rest),\n    children: [filters && /*#__PURE__*/cloneElement(filters, {\n      resource,\n      showFilter,\n      displayedFilters,\n      filterValues,\n      context: 'button'\n    }), /*#__PURE__*/_jsxDEV(CreateButton, {\n      basePath: basePath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ExportButton, {\n      disabled: total === 0,\n      resource: resource,\n      sort: currentSort,\n      filterValues: filterValues,\n      maxResults: maxResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        alert('Your custom action');\n      },\n      label: \"Show calendar\",\n      children: /*#__PURE__*/_jsxDEV(IconEvent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListActions, \"AF0+cSOvt5JHKAKOUwCCOoRVhww=\", false, function () {\n  return [useListContext];\n});\n\n_c2 = ListActions;\nexport const NotificationList = props => {\n  _s2();\n\n  const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n  return /*#__PURE__*/_jsxDEV(List, {\n    filters: /*#__PURE__*/_jsxDEV(NotificationFilter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 24\n    }, this),\n    actions: /*#__PURE__*/_jsxDEV(ListActions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 57\n    }, this),\n    ...props,\n    children: isSmall ? /*#__PURE__*/_jsxDEV(SimpleList, {\n      primaryText: record => record.report_title,\n      secondaryText: record => `${record.report_content} views`,\n      tertiaryText: record => new Date(record.report_timestamp * 1000).toLocaleDateString(),\n      linkType: record => record.canEdit ? \"edit\" : \"show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Datagrid, {\n      rowClick: \"show\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Title\",\n        source: \"report_title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Content\",\n        source: \"report_content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DateTimeField, {\n        label: \"Date\",\n        source: \"report_timestamp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n        label: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(NotificationList, \"+XqJ9UG1ndrE6RgM1+kla/ovLjc=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c3 = NotificationList;\n\nconst CustomShowActions = ({\n  basePath,\n  data,\n  resource\n}) => /*#__PURE__*/_jsxDEV(TopToolbar, {\n  children: /*#__PURE__*/_jsxDEV(DeleteButton, {\n    undoable: false,\n    basePath: basePath,\n    record: data,\n    resource: resource\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 99,\n  columnNumber: 5\n}, this);\n\n_c4 = CustomShowActions;\nexport const NotificationShow = props => /*#__PURE__*/_jsxDEV(Show, {\n  actions: /*#__PURE__*/_jsxDEV(CustomShowActions, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 18\n  }, this),\n  ...props,\n  children: /*#__PURE__*/_jsxDEV(SimpleShowLayout, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Title\",\n      source: \"report_title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Content\",\n      source: \"report_content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DateTimeField, {\n      label: \"Date\",\n      source: \"report_timestamp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 106,\n  columnNumber: 3\n}, this);\n_c5 = NotificationShow;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"NotificationFilter\");\n$RefreshReg$(_c2, \"ListActions\");\n$RefreshReg$(_c3, \"NotificationList\");\n$RefreshReg$(_c4, \"CustomShowActions\");\n$RefreshReg$(_c5, \"NotificationShow\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin/src/models/NotificationList.js"],"names":["React","cloneElement","useMemo","PropTypes","useListContext","CreateButton","ExportButton","Button","sanitizeListRestProps","IconEvent","List","Datagrid","TextField","Filter","TextInput","ReferenceInput","SelectInput","Show","SimpleShowLayout","SimpleList","DeleteButton","TopToolbar","useMediaQuery","DateTimeField","NotificationFilter","props","ListActions","className","exporter","filters","maxResults","rest","currentSort","resource","displayedFilters","filterValues","hasCreate","basePath","selectedIds","showFilter","total","context","alert","NotificationList","isSmall","theme","breakpoints","down","record","report_title","report_content","Date","report_timestamp","toLocaleDateString","canEdit","CustomShowActions","data","NotificationShow"],"mappings":"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","sourcesContent":["import React from 'react';\n// import * as React from 'react';\nimport { cloneElement, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    useListContext,\n    CreateButton, ExportButton, Button,\n    sanitizeListRestProps,\n} from 'react-admin';\nimport IconEvent from '@material-ui/icons/Event';\n\nimport {\n  List, Datagrid, TextField, Filter, TextInput, ReferenceInput, SelectInput,\n  Show, SimpleShowLayout, SimpleList,\n  DeleteButton, TopToolbar\n} from 'react-admin';\nimport { useMediaQuery} from '@material-ui/core';\nimport {DateTimeField} from '../components'\n\nexport const NotificationFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"report_title\" alwaysOn />\n    </Filter>\n);\n\nconst ListActions = (props) => {\n    const {\n        className,\n        exporter,\n        filters,\n        maxResults,\n        ...rest\n    } = props;\n    const {\n        currentSort,\n        resource,\n        displayedFilters,\n        filterValues,\n        hasCreate,\n        basePath,\n        selectedIds,\n        showFilter,\n        total,\n    } = useListContext();\n    return (\n        <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n            {filters && cloneElement(filters, {\n                resource,\n                showFilter,\n                displayedFilters,\n                filterValues,\n                context: 'button',\n            })}\n            <CreateButton basePath={basePath} />\n            <ExportButton\n                disabled={total === 0}\n                resource={resource}\n                sort={currentSort}\n                filterValues={filterValues}\n                maxResults={maxResults}\n            />\n            {/* Add your custom actions */}\n            <Button\n                onClick={() => { alert('Your custom action'); }}\n                label=\"Show calendar\"\n            >\n                <IconEvent />\n            </Button>\n        </TopToolbar>\n    );\n};\n\nexport const NotificationList = (props) => {\n\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return (\n        <List filters={<NotificationFilter />} actions={<ListActions />} {...props}>\n            {isSmall ? (\n                <SimpleList\n                    primaryText={record => record.report_title}\n                    secondaryText={record => `${record.report_content} views`}\n                    tertiaryText={record => new Date(record.report_timestamp * 1000).toLocaleDateString()}\n                    linkType={record => record.canEdit ? \"edit\" : \"show\"}\n                />\n            ) : (\n                <Datagrid rowClick=\"show\">\n                    <TextField label=\"Title\" source=\"report_title\" />\n                    <TextField label=\"Content\" source=\"report_content\" />\n                    <DateTimeField label='Date' source='report_timestamp' />\n                    <DeleteButton label='Delete'/>\n                </Datagrid>\n            )}\n        </List>\n    )\n};\n\n\nconst CustomShowActions = ({ basePath, data, resource }) => (\n    <TopToolbar>\n        {/* <EditButton basePath={basePath} record={data} /> */}\n        <DeleteButton undoable={false} basePath={basePath} record={data} resource={resource}/>\n    </TopToolbar>\n);\n\nexport const NotificationShow = props => (\n  <Show actions={<CustomShowActions />} {...props}>\n    <SimpleShowLayout>\n        <TextField label=\"Title\" source=\"report_title\" />\n        <TextField label=\"Content\" source=\"report_content\" />\n        <DateTimeField label=\"Date\" source=\"report_timestamp\" />\n        {/* <DeleteButton basePath={props.basePath} record={props.record} resource={props.resource}/> */}\n    </SimpleShowLayout>\n  </Show>\n);\n\n"]},"metadata":{},"sourceType":"module"}