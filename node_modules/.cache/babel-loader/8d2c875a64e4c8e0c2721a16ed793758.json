{"ast":null,"code":"import { fetchUtils } from 'react-admin';\nimport { stringify } from 'query-string';\nconst apiUrl = 'https://my.api.com/';\nconst httpClient = fetchUtils.fetchJson;\nexport default {\n  getList: (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify(params.filter)\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      headers,\n      json\n    }) => ({\n      data: json,\n      total: parseInt(headers.get('content-range').split('/').pop(), 10)\n    }));\n  },\n  getOne: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  getMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  getManyReference: (resource, params) => {\n    const {\n      page,\n      perPage\n    } = params.pagination;\n    const {\n      field,\n      order\n    } = params.sort;\n    const query = {\n      sort: JSON.stringify([field, order]),\n      range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n      filter: JSON.stringify({ ...params.filter,\n        [params.target]: params.id\n      })\n    };\n    const url = `${apiUrl}/${resource}?${stringify(query)}`;\n    return httpClient(url).then(({\n      headers,\n      json\n    }) => ({\n      data: json,\n      total: parseInt(headers.get('content-range').split('/').pop(), 10)\n    }));\n  },\n  update: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'PUT',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  updateMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'PUT',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  },\n  create: (resource, params) => httpClient(`${apiUrl}/${resource}`, {\n    method: 'POST',\n    body: JSON.stringify(params.data)\n  }).then(({\n    json\n  }) => ({\n    data: { ...params.data,\n      id: json.id\n    }\n  })),\n  delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}`, {\n    method: 'DELETE'\n  }).then(({\n    json\n  }) => ({\n    data: json\n  })),\n  deleteMany: (resource, params) => {\n    const query = {\n      filter: JSON.stringify({\n        id: params.ids\n      })\n    };\n    return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n      method: 'DELETE',\n      body: JSON.stringify(params.data)\n    }).then(({\n      json\n    }) => ({\n      data: json\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin/src/DataProvider.js"],"names":["fetchUtils","stringify","apiUrl","httpClient","fetchJson","getList","resource","params","page","perPage","pagination","field","order","sort","query","JSON","range","filter","url","then","headers","json","data","total","parseInt","get","split","pop","getOne","id","getMany","ids","getManyReference","target","update","method","body","updateMany","create","delete","deleteMany"],"mappings":"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","sourcesContent":["import { fetchUtils } from 'react-admin';\nimport { stringify } from 'query-string';\n\nconst apiUrl = 'https://my.api.com/';\nconst httpClient = fetchUtils.fetchJson;\n\nexport default {\n    getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10),\n        }));\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json })),\n\n    deleteMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'DELETE',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    }\n};"]},"metadata":{},"sourceType":"module"}