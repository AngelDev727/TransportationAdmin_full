{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Methods from './methods';\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE, DELETE_MANY } from 'react-admin';\n/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */\n\nconst BaseConfiguration = {\n  initialQuerytimeout: 10000,\n  timestampFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n  }\n};\n\nconst RestProvider = (firebaseConfig = {}, options = {}) => {\n  options = Object.assign({}, BaseConfiguration, options);\n  const {\n    timestampFieldNames,\n    trackedResources\n  } = options;\n  const resourcesStatus = {}; // const resourcesReferences = {};\n\n  const resourcesData = {};\n  const resourcesPaths = {};\n  const resourcesUploadFields = {};\n\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n  }\n  /* Functions */\n\n\n  const upload = options.upload || Methods.upload;\n  const save = options.save || Methods.save;\n  const del = options.del || Methods.del;\n  const getItemID = options.getItemID || Methods.getItemID;\n  const getOne = options.getOne || Methods.getOne;\n  const getMany = options.getMany || Methods.getMany;\n  const getManyReference = options.getManyReference || Methods.getManyReference;\n  const delMany = options.delMany || Methods.delMany;\n  const getList = options.getList || Methods.getList;\n  const firebaseSaveFilter = options.firebaseSaveFilter ? options.firebaseSaveFilter : data => data; // const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n  // Sanitize Resources\n\n  trackedResources.map((resource, index) => {\n    if (typeof resource === Array) {\n      resource = {\n        name: resource['name'],\n        path: resource['path'] || resource['name'],\n        uploadFields: resource['uploadFields'] || []\n      };\n      trackedResources[index] = resource;\n    }\n\n    const {\n      name,\n      path,\n      uploadFields\n    } = resource;\n\n    if (!resource.name) {\n      throw new Error(`name is missing from resource ${resource}`);\n    }\n\n    resourcesUploadFields[name] = uploadFields || [];\n    resourcesPaths[name] = path || name;\n    resourcesData[name] = {};\n  });\n  /**\n   * @param {string} type Request type, e.g GET_LIST\n   * @param {string} resourceName Resource name, e.g. \"posts\"\n   * @param {Object} payload Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a REST response\n   */\n\n  return async (type, resourceName, params) => {\n    await resourcesStatus[resourceName];\n    let result = null;\n\n    switch (type) {\n      case GET_LIST:\n        console.log('GET_LIST');\n        console.log(resourceName);\n        console.log(resourcesData[resourceName]);\n        result = await getList(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n        return result;\n\n      case GET_MANY:\n        result = await getMany(params, resourcesPaths[resourceName], resourcesData[resourceName]); // console.log('GET_MANY');\n\n        return result;\n\n      case GET_MANY_REFERENCE:\n        // console.log('GET_MANY_REFERENCE');\n        result = await getManyReference(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n        return result;\n\n      case GET_ONE:\n        // console.log('GET_ONE');\n        result = await getOne(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n        return result;\n\n      case DELETE:\n        console.log('DELETE');\n        console.log(params);\n        console.log(resourceName);\n        console.log(resourcesPaths);\n        const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : [];\n        result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields);\n        return result;\n\n      case DELETE_MANY:\n        // console.log('DELETE_MANY');\n        result = await delMany(params.ids, resourcesPaths[resourceName], resourcesData[resourceName]);\n        return result;\n\n      case UPDATE:\n      case CREATE:\n        // console.log('UPDATE/CREATE');\n        let itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName]);\n        const uploads = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName].map(field => upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName])) : [];\n        const currentData = resourcesData[resourceName][itemId] || {};\n        const uploadResults = await Promise.all(uploads);\n        result = await save(itemId, params.data, currentData, resourceName, resourcesPaths[resourceName], firebaseSaveFilter, uploadResults, type === CREATE, timestampFieldNames);\n        return result;\n\n      default:\n        console.error('Undocumented method: ', type);\n        return {\n          data: []\n        };\n    }\n  };\n};\n\n_c = RestProvider;\nexport default RestProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestProvider\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin/src/lib/RestProvider.js"],"names":["firebase","Methods","GET_LIST","GET_ONE","GET_MANY","GET_MANY_REFERENCE","CREATE","UPDATE","DELETE","DELETE_MANY","BaseConfiguration","initialQuerytimeout","timestampFieldNames","createdAt","updatedAt","RestProvider","firebaseConfig","options","Object","assign","trackedResources","resourcesStatus","resourcesData","resourcesPaths","resourcesUploadFields","apps","length","initializeApp","auth","setPersistence","Auth","Persistence","SESSION","upload","save","del","getItemID","getOne","getMany","getManyReference","delMany","getList","firebaseSaveFilter","data","map","resource","index","Array","name","path","uploadFields","Error","type","resourceName","params","result","console","log","id","ids","itemId","uploads","field","currentData","uploadResults","Promise","all","error"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport Methods from './methods';\n\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE, DELETE_MANY } from 'react-admin';\n\n/**\n * @param {string[]|Object[]} trackedResources Array of resource names or array of Objects containing name and\n * optional path properties (path defaults to name)\n * @param {Object} firebaseConfig Options Firebase configuration\n */\n\nconst BaseConfiguration = {\ninitialQuerytimeout: 10000,\ntimestampFieldNames: {\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt'\n}\n};\n\nconst RestProvider = (firebaseConfig = {}, options = {}) => {\n    options = Object.assign({}, BaseConfiguration, options);\n    const { timestampFieldNames, trackedResources } = options;\n\n    const resourcesStatus = {};\n    // const resourcesReferences = {};\n    const resourcesData = {};\n    const resourcesPaths = {};\n    const resourcesUploadFields = {};\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(firebaseConfig);\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION);\n    }\n\n    /* Functions */\n    const upload = options.upload || Methods.upload;\n    const save = options.save || Methods.save;\n    const del = options.del || Methods.del;\n    const getItemID = options.getItemID || Methods.getItemID;\n    const getOne = options.getOne || Methods.getOne;\n    const getMany = options.getMany || Methods.getMany;\n    const getManyReference = options.getManyReference || Methods.getManyReference;\n    const delMany = options.delMany || Methods.delMany;\n    const getList = options.getList || Methods.getList;\n\n    const firebaseSaveFilter = options.firebaseSaveFilter ? options.firebaseSaveFilter : data => data;\n    // const firebaseGetFilter = options.firebaseGetFilter ? options.firebaseGetFilter : data => data;\n\n    // Sanitize Resources\n    trackedResources.map((resource, index) => {\n        if (typeof resource === Array) {\n        resource = {\n            name: resource['name'],\n            path: resource['path'] || resource['name'],\n            uploadFields: resource['uploadFields'] || []\n        };\n        trackedResources[index] = resource;\n        }\n\n        const { name, path, uploadFields } = resource;\n        if (!resource.name) {\n        throw new Error(`name is missing from resource ${resource}`);\n        }\n        resourcesUploadFields[name] = uploadFields || [];\n        resourcesPaths[name] = path || name;\n        resourcesData[name] = {};\n    });\n\n    /**\n     * @param {string} type Request type, e.g GET_LIST\n     * @param {string} resourceName Resource name, e.g. \"posts\"\n     * @param {Object} payload Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a REST response\n     */\n\n    return async (type, resourceName, params) => {\n        await resourcesStatus[resourceName];\n        let result = null;\n        switch (type) {\n        case GET_LIST:\n            console.log('GET_LIST');\n            console.log(resourceName)\n            console.log(resourcesData[resourceName]);\n            result = await getList(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n        case GET_MANY:\n            result = await getMany(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            // console.log('GET_MANY');\n            return result;\n\n        case GET_MANY_REFERENCE:\n            // console.log('GET_MANY_REFERENCE');\n            result = await getManyReference(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n\n        case GET_ONE:\n            // console.log('GET_ONE');\n            result = await getOne(params, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n\n        case DELETE:\n            console.log('DELETE');\n            console.log(params);\n            console.log(resourceName);\n            console.log(resourcesPaths);\n            const uploadFields = resourcesUploadFields[resourceName] ? resourcesUploadFields[resourceName] : [];\n            result = await del(params.id, resourceName, resourcesPaths[resourceName], uploadFields);\n            return result;\n\n        case DELETE_MANY:\n            // console.log('DELETE_MANY');\n            result = await delMany(params.ids, resourcesPaths[resourceName], resourcesData[resourceName]);\n            return result;\n        case UPDATE:\n        case CREATE:\n            // console.log('UPDATE/CREATE');\n            let itemId = getItemID(params, type, resourceName, resourcesPaths[resourceName], resourcesData[resourceName]);\n            const uploads = resourcesUploadFields[resourceName]\n            ? resourcesUploadFields[resourceName].map(field =>\n                upload(field, params.data, itemId, resourceName, resourcesPaths[resourceName])\n                )\n            : [];\n            \n            const currentData = resourcesData[resourceName][itemId] || {};\n            const uploadResults = await Promise.all(uploads);\n            \n            result = await save(\n            itemId,\n            params.data,\n            currentData,\n            resourceName,\n            resourcesPaths[resourceName],\n            firebaseSaveFilter,\n            uploadResults,\n            type === CREATE,\n            timestampFieldNames\n            );\n            return result;\n\n        default:\n            console.error('Undocumented method: ', type);\n            return { data: [] };\n        }\n    };\n};\n\nexport default RestProvider;"]},"metadata":{},"sourceType":"module"}