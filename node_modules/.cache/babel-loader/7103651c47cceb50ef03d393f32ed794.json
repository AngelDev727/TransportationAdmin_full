{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error } from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport PropTypes from 'prop-types'; // const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nfunction getTimestampFirstDayOfKey(datetype) {\n  var date = new Date();\n  date.setDate(1);\n\n  if (datetype === \"month\") {\n    return Math.round(Number(date.valueOf() / 1000));\n  } else {\n    date.setDate(0);\n    return Math.round(Number(date.valueOf() / 1000));\n  }\n}\n\nconst getDateTime = (value, datetype) => {\n  if (value === undefined) {\n    return \"\";\n  } else {\n    const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n    var year = timestamp.getFullYear();\n    var month = (1 + timestamp.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month; // return timestamp.toLocaleString();\n\n    if (datetype === \"month\") return timestamp.toLocaleDateString();else return month + \"/\" + year;\n  }\n};\n\nconst DashChart = ({\n  datetype\n}) => {\n  _s();\n\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n  // const width = \n  const dataProvider = useDataProvider();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [total, setTotal] = useState();\n  useEffect(() => {\n    dataProvider('GET_LIST', 'notifications', {\n      sort: {\n        field: 'report_timestamp',\n        order: 'ASC'\n      },\n      pagination: {\n        page: 1,\n        perPage: 10000000\n      }\n    }).then(({\n      data,\n      total\n    }) => {\n      setData(data);\n      setTotal(total);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  var chartData = [];\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 23\n  }, this);\n  var preDate = \"\";\n  data.map(async answer => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    if (answer.report_timestamp < getTimestampFirstDayOfKey(datetype)) {\n      return;\n    }\n\n    const selDate = getDateTime(answer.report_timestamp, datetype);\n\n    if (preDate === selDate) {\n      chartData[chartData.length - 1].Notifications += 1;\n    } else {\n      chartData[chartData.length] = {\n        name: selDate,\n        Notifications: 1\n      };\n      preDate = selDate;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    height: 250,\n    width: \"99%\",\n    children: /*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 500,\n      height: 400,\n      data: chartData,\n      margin: {\n        top: 10,\n        right: 30,\n        left: 0,\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"Notifications\",\n        stroke: \"#8884d8\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashChart, \"v7n3t6dB5FX7pzViuVovUzfyBgg=\", false, function () {\n  return [useDataProvider];\n});\n\n_c = DashChart;\nDashChart.propTypes = {\n  datetype: PropTypes.string.isRequired\n};\nexport default DashChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashChart\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js"],"names":["React","useState","useEffect","useDataProvider","Loading","Error","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","PropTypes","getTimestampFirstDayOfKey","datetype","date","Date","setDate","Math","round","Number","valueOf","getDateTime","value","undefined","timestamp","year","getFullYear","month","getMonth","toString","length","toLocaleDateString","DashChart","dataProvider","data","setData","loading","setLoading","error","setError","total","setTotal","sort","field","order","pagination","page","perPage","then","catch","chartData","preDate","map","answer","report_timestamp","selDate","Notifications","name","top","right","left","bottom","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error} from 'react-admin';\nimport {\n    ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts';\nimport PropTypes from 'prop-types';\n\n// const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nfunction getTimestampFirstDayOfKey(datetype) {\n    var date = new Date();\n    date.setDate(1);\n    if (datetype === \"month\") {\n        return Math.round(Number(date.valueOf() / 1000));\n    } else {\n        date.setDate(0);\n        return Math.round(Number(date.valueOf() / 1000));\n    }\n    \n}\n\nconst getDateTime = (value, datetype) => {\n    if (value === undefined) {\n        return \"\";\n    } else {\n        const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n        var year = timestamp.getFullYear();\n        var month = (1 + timestamp.getMonth()).toString();\n        month = month.length > 1 ? month : '0' + month;\n        \n        // return timestamp.toLocaleString();\n        if (datetype === \"month\")\n            return timestamp.toLocaleDateString();\n        else \n            return month + \"/\" + year;\n    }\n};\n\nconst DashChart = ({ datetype }) => {\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n    // const width = \n\n    const dataProvider = useDataProvider();\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n    const [total, setTotal] = useState();\n\n\n    useEffect(() => {\n\n        dataProvider('GET_LIST', 'notifications', {\n            sort: { field: 'report_timestamp', order: 'ASC' },\n            pagination: { page: 1, perPage: 10000000 },\n        })\n            .then(({ data, total }) => {\n                setData(data); \n                setTotal(total);                \n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n\n    var chartData = [];\n\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n\n    var preDate = \"\"\n    data.map(async answer => {\n        if (!data || data.length === 0) {\n            return;\n        }\n\n        if (answer.report_timestamp < getTimestampFirstDayOfKey(datetype)) {\n            return;\n        }\n\n        const selDate = getDateTime(answer.report_timestamp, datetype);\n\n        if (preDate === selDate) {\n            chartData[chartData.length - 1].Notifications += 1;\n        } else {\n            chartData[chartData.length] = {\n                name: selDate,\n                Notifications  : 1\n            };\n            preDate = selDate;\n        }\n    });\n\n    return (\n        <ResponsiveContainer height={250} width='99%'>\n            <AreaChart width={500} height={400} data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0,}}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"Notifications\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n            </AreaChart>\n        </ResponsiveContainer>  \n        \n    );\n}\n\nDashChart.propTypes = {\n    datetype: PropTypes.string.isRequired,\n};\n\nexport default DashChart;"]},"metadata":{},"sourceType":"module"}