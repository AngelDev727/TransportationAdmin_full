{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error, Button } from 'react-admin';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'; // const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst getDateTime = value => {\n  if (value === undefined) {\n    return \"\";\n  } else {\n    const timestamp = new Date(value === undefined ? new Date() : value * 1000); // return timestamp.toLocaleString();\n\n    return timestamp.toLocaleDateString();\n  }\n};\n\nconst DashChart = () => {\n  _s();\n\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n  // const width = \n  const dataProvider = useDataProvider();\n  const [data, setData] = useState();\n  const [total, setTotal] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    dataProvider('GET_LIST', 'notifications', {\n      // filter: { date_gte: aMonthAgo.toISOString() },\n      sort: {\n        field: 'report_timestamp',\n        order: 'DESC'\n      },\n      pagination: {\n        page: 1,\n        perPage: 100000\n      }\n    }) // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n    .then(({\n      data,\n      total\n    }) => {\n      setData(data);\n      setTotal(total);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []);\n  var chartData = [];\n\n  if (data) {\n    data.map(async answer => {\n      if (!data || data.length === 0) {\n        return;\n      }\n\n      chartData[chartData.length] = {\n        name: getDateTime(answer.report_timestamp),\n        uv: (answer.report_timestamp - 1606550000) / 10000\n      }; // const scores = answer.score.split(\",\");\n      // const day = new Date(answer.date).getDate() + 1;\n      // if(scores.length > 1) {\n      // var total = 0;\n      // scores.forEach(item => {\n      //     total += Number(item);\n      // });\n      // answer.score = (total / scores.length).toFixed(0) + \"\";\n      // }\n      // if(answers[answer.question_id] === undefined) {\n      // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n      // if (answers[answer.question_id].answer[day] !== undefined) {\n      //     answers[answer.question_id].answer[day].score = answer.score;\n      // }\n      // } else {\n      // if (answers[answer.question_id].answer[day] !== undefined) {\n      //     answers[answer.question_id].answer[day].score = answer.score;\n      // }\n      // }\n    });\n  }\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      height: 250,\n      width: \"99%\",\n      children: /*#__PURE__*/_jsxDEV(AreaChart, {\n        width: 500,\n        height: 400,\n        data: chartData,\n        margin: {\n          top: 10,\n          right: 30,\n          left: 0,\n          bottom: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Area, {\n          type: \"monotone\",\n          dataKey: \"uv\",\n          stroke: \"#8884d8\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"small\",\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"Download Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashChart, \"q0G1Bc4sulC7kIZag34mnG7HcHQ=\", false, function () {\n  return [useDataProvider];\n});\n\n_c = DashChart;\nexport default DashChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashChart\");","map":{"version":3,"sources":["/Users/rapunzel/Documents/tb-admin 2/src/components/DashChart.js"],"names":["React","useState","useEffect","useDataProvider","Loading","Error","Button","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","getDateTime","value","undefined","timestamp","Date","toLocaleDateString","DashChart","dataProvider","data","setData","total","setTotal","loading","setLoading","error","setError","sort","field","order","pagination","page","perPage","then","catch","chartData","map","answer","length","name","report_timestamp","uv","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDataProvider, Loading, Error, Button} from 'react-admin';\nimport {\n    ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\n} from 'recharts';\n\n// const data = [\n//     {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\n//     {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\n//     {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\n//     {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\n//     {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\n//     {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\n//     {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\n// ];\n\nconst getDateTime = value => {\n    if (value === undefined) {\n        return \"\";\n    } else {\n        const timestamp = new Date(value === undefined ? new Date() : value * 1000);\n        // return timestamp.toLocaleString();\n        return timestamp.toLocaleDateString();\n    }\n    \n};\n\nconst DashChart = () => {\n    // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/Lrffmzfc/';\n    // const width = \n\n    const dataProvider = useDataProvider();\n    const [data, setData] = useState();\n    const [total, setTotal] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState();\n\n    useEffect(() => {\n\n        dataProvider('GET_LIST', 'notifications', {\n            // filter: { date_gte: aMonthAgo.toISOString() },\n            sort: { field: 'report_timestamp', order: 'DESC' },\n            pagination: { page: 1, perPage: 100000 },\n        })\n        // dataProvider.getList('notifications', { sort: {report_timestamp:'ASC'}, filter: {} })\n            .then(({ data, total }) => {\n                setData(data); \n                setTotal(total);                \n                setLoading(false);\n            })\n            .catch(error => {\n                setError(error);\n                setLoading(false);\n            })\n    }, []);\n\n    var chartData = [];\n    if ( data) {\n        data.map(async answer => {\n            if (!data || data.length === 0) {\n                return;\n            }\n    \n            chartData[chartData.length] = {\n                name: getDateTime(answer.report_timestamp),\n                uv  : (answer.report_timestamp - 1606550000) / 10000\n\n            };\n    \n            // const scores = answer.score.split(\",\");\n            // const day = new Date(answer.date).getDate() + 1;\n            // if(scores.length > 1) {\n            // var total = 0;\n            // scores.forEach(item => {\n            //     total += Number(item);\n            // });\n            // answer.score = (total / scores.length).toFixed(0) + \"\";\n            // }\n            // if(answers[answer.question_id] === undefined) {\n            // answers[answer.question_id] = { question: answer.question, answer: getDaysInMonth(month, year)};\n            // if (answers[answer.question_id].answer[day] !== undefined) {\n            //     answers[answer.question_id].answer[day].score = answer.score;\n            // }\n            // } else {\n            // if (answers[answer.question_id].answer[day] !== undefined) {\n            //     answers[answer.question_id].answer[day].score = answer.score;\n            // }\n            // }\n        });\n    \n    \n    }\n    if (loading) return <Loading />;\n    if (error) return <Error />;\n\n    return (\n        <div>\n            <ResponsiveContainer height={250} width='99%'>\n                <AreaChart width={500} height={400} data={chartData} margin={{ top: 10, right: 30, left: 0, bottom: 0,}}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                </AreaChart>\n            </ResponsiveContainer>\n            <Button size=\"small\" variant=\"contained\" color=\"primary\">Download Image</Button>\n            {/* downloadImage.bind(this, element)  */}\n        </div>\n        \n    );\n}\n\nexport default DashChart;"]},"metadata":{},"sourceType":"module"}